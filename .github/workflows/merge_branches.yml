name: Merge Feature Branches

on:
  # Manual trigger
  workflow_dispatch:
  
  # Run on a schedule (e.g., every day at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Fetch all history for all branches
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          git config user.name "GitHub Actions"
          git config user.email "actions@github.com"
      
      - name: Set up environment variables
        id: vars
        run: |
          echo "merged_branch=merged" >> $GITHUB_OUTPUT
          echo "base_branch=master" >> $GITHUB_OUTPUT
      
      - name: Fetch all branches
        run: |
          git fetch --all
          
      - name: Get all branches except master
        id: branches
        run: |
          # Ensure we have all remote branches
          git fetch --all
          
          # Get list of all remote branches except master, merged, and HEAD
          BRANCHES=$(git branch -r | grep "origin/" | grep -v "origin/${{ steps.vars.outputs.base_branch }}" | grep -v "origin/${{ steps.vars.outputs.merged_branch }}" | grep -v "origin/HEAD" | sed 's/origin\///')
          
          # Debug output
          echo "Found branches to merge:"
          echo "$BRANCHES" | sed 's/^/  - /'
          
          # Check if we found any branches
          if [ -z "$BRANCHES" ]; then
            echo "::warning::No branches found to merge!"
          fi
          
          # Set output
          echo "branches<<EOF" >> $GITHUB_OUTPUT
          echo "$BRANCHES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Merge each branch
        run: |
          # Read branches from previous step
          echo "Merging branches into ${{ steps.vars.outputs.merged_branch }}..."
          
          # Debug: Show current branch and its status
          echo "Current branch: $(git branch --show-current)"
          git status
          
          # Check if we have branches to merge
          if [ -z "${{ steps.branches.outputs.branches }}" ]; then
            echo "::warning::No branches to merge. Skipping merge step."
            exit 0
          fi
          
          # Process each branch
          echo "${{ steps.branches.outputs.branches }}" | while read branch; do
            if [ -n "$branch" ]; then
              echo ""  # Empty line
              echo "==== Merging branch: $branch ===="
              echo "Branch exists check: $(git branch -r | grep origin/$branch || echo 'NOT FOUND')"
              
              # Ensure the branch exists
              if git branch -r | grep -q "origin/$branch"; then
                # Try to merge
                git merge --no-edit origin/$branch || {
                  echo "::warning::Merge conflict detected in $branch - skipping this branch"
                  git merge --abort
                  continue
                }
                
                echo "Merge successful for $branch"
                git log -1 --oneline
              else
                echo "::warning::Branch $branch not found, skipping"
              fi
            fi
          done
          
          # Show the merge result
          echo ""  # Empty line
          echo "==== Merge result ===="
          git log --oneline -n 10
      
      - name: Summary
        id: summary
        run: |
          echo "Successfully merged all branches except ${{ steps.vars.outputs.base_branch }} into ${{ steps.vars.outputs.merged_branch }}"
          echo "The merged branch is available at: ${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.vars.outputs.merged_branch }}"
          
          # Get list of merged branches for PR description
          MERGED_BRANCHES=$(git branch -r | grep "origin/" | grep -v "origin/${{ steps.vars.outputs.base_branch }}" | grep -v "origin/${{ steps.vars.outputs.merged_branch }}" | grep -v "origin/HEAD" | sed 's/origin\///')
          BRANCH_LIST=$(echo "$MERGED_BRANCHES" | sed 's/^/- /')
          echo "branch_list<<EOF" >> $GITHUB_OUTPUT
          echo "$BRANCH_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Merge all feature branches into ${{ steps.vars.outputs.base_branch }}"
          base: ${{ steps.vars.outputs.base_branch }}
          delete-branch: true
          title: "Merge all feature branches into ${{ steps.vars.outputs.base_branch }}"
          body: |
            ## Automated Branch Merge
            
            This PR contains changes from all feature branches merged into one.
            
            ### Branches included in this merge:
            ${{ steps.summary.outputs.branch_list }}
            
            Auto-generated by GitHub Actions workflow
