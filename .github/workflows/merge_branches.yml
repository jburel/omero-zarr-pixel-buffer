name: Merge Feature Branches

on:
  # Manual trigger
  workflow_dispatch:
  push:
  
  # Run on a schedule (e.g., every day at midnight UTC)
  schedule:
    - cron: '0 0 * * *'

jobs:
  merge-branches:
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for all branches
          token: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Configure Git
        run: |
          #git config user.name "GitHub Actions"
          #git config user.email "actions@github.com"
          git config --global user.email github-actions@github.com
          git config --global user.name github-actions
      
      - name: Set up environment variables
        id: vars
        run: |
          echo "merged_branch=merged" >> $GITHUB_OUTPUT
          echo "base_branch=master" >> $GITHUB_OUTPUT
      
      - name: Fetch all branches
        run: |
          git fetch --all
          
     # - name: Create or reset merged branch
     #   run: |
     #     # Check if merged branch exists remotely
     #     if git ls-remote --heads origin ${{ steps.vars.outputs.merged_branch }} | grep -q ${{ steps.vars.outputs.merged_branch }}; then
     #       # If it exists, fetch and reset it
     #       git checkout ${{ steps.vars.outputs.merged_branch }}
     #       git reset --hard origin/${{ steps.vars.outputs.base_branch }}
     #     else
     #       # If it doesn't exist, create it based on master
     #       git checkout ${{ steps.vars.outputs.base_branch }}
     #       git checkout -b ${{ steps.vars.outputs.merged_branch }}
     #     fi
      
      - name: Get all branches except master
        id: branches
        run: |
          BRANCHES=$(git branch -r | grep "origin/" | grep -v "origin/${{ steps.vars.outputs.base_branch }}" | grep -v "origin/${{ steps.vars.outputs.merged_branch }}" | grep -v "origin/HEAD" | sed 's/origin\///')
          echo "Found branches to merge:"
          echo "$BRANCHES" | sed 's/^/  - /'
          echo "branches<<EOF" >> $GITHUB_OUTPUT
          echo "$BRANCHES" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Merge each branch
        run: |
          # Read branches from previous step
          echo "Merging branches into ${{ steps.vars.outputs.merged_branch }}..."
          
          # Process each branch
          echo "${{ steps.branches.outputs.branches }}" | while read branch; do
            if [ -n "$branch" ]; then
              echo "Merging branch: $branch"
              git merge --no-edit origin/$branch || {
                echo "::warning::Merge conflict detected in $branch - skipping this branch"
                git merge --abort
                continue
              }
            fi
          done
      
     # - name: Push merged branch
     #   run: |
    #      echo "Pushing ${{ steps.vars.outputs.merged_branch }} branch..."
    #      git push -f origin ${{ steps.vars.outputs.merged_branch }}
     # 
      - name: Summary
        id: summary
        run: |
          echo "Successfully merged all branches except ${{ steps.vars.outputs.base_branch }} into ${{ steps.vars.outputs.merged_branch }}"
          echo "The merged branch is available at: ${{ github.server_url }}/${{ github.repository }}/tree/${{ steps.vars.outputs.merged_branch }}"
          
          # Get list of merged branches for PR description
          MERGED_BRANCHES=$(git branch -r | grep "origin/" | grep -v "origin/${{ steps.vars.outputs.base_branch }}" | grep -v "origin/${{ steps.vars.outputs.merged_branch }}" | grep -v "origin/HEAD" | sed 's/origin\///')
          BRANCH_LIST=$(echo "$MERGED_BRANCHES" | sed 's/^/- /')
          echo "branch_list<<EOF" >> $GITHUB_OUTPUT
          echo "$BRANCH_LIST" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
      
      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v7
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "Merge all feature branches into ${{ steps.vars.outputs.base_branch }}"
          branch: ${{ steps.vars.outputs.merged_branch }}
          base: ${{ steps.vars.outputs.base_branch }}
          delete-branch: false
          title: "Merge all feature branches into ${{ steps.vars.outputs.base_branch }}"
          body: |
            ## Automated Branch Merge
            
            This PR contains changes from all feature branches merged into one.
            
            ### Branches included in this merge:
            ${{ steps.summary.outputs.branch_list }}
            
            Auto-generated by GitHub Actions workflow
